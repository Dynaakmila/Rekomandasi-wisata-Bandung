# -*- coding: utf-8 -*-
"""Tugas akhir

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PwkkKBF1gi6AAgOyN8CO9v-qFbwZFRQi

Sistem Rekomendasi Wisata Bandung
"""

Total Data Berdasarkan Primary key Place_Id

project ini akan merekomendasikan rekomendasui wisata dari satu kota

pip install wget

import wget
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import zipfile

# load the dataset
local_zip = '/content/data.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""##Data Understanding"""

wisata = pd.read_csv('/content/tourism_with_id.csv')
pengunjung = pd.read_csv('/content/user.csv')
rating_wisata = pd.read_csv('/content/tourism_rating.csv')

"""Total Data Berdasarkan Primary key Place_Id

project ini akan merekomendasikan rekomendasui wisata dari satu kota
"""

print('Jumlah Wisata :', len(wisata.Place_Id.unique()))
print('Jumlah Data User :', len(pengunjung.User_Id.unique()))
print('Jumlah Data Rating Wisata :', len(rating_wisata.Place_Id.unique()))
print('=============================')
print('Jumlah Semua Data Wisata :', len(wisata))
print('Jumlah Semua Data User :', len(pengunjung))
print('Jumlah Semua Data Rating Wisata :', len(rating_wisata))

"""Mencetak jumlah nilai unik dari kolom kunci utama di setiap DataFrame (Place_Id di wisata dan rating_wisata, serta User_Id di pengunjung). Ini memberikan gambaran tentang jumlah entitas unik dalam setiap dataset. Kemudian, mencetak jumlah total baris di setiap DataFrame.

##Exploratory Data

Data destinasi Wisata
"""

wisata.info()

"""Menampilkan ringkasan DataFrame wisata, termasuk tipe data setiap kolom, jumlah nilai non-null, dan penggunaan memori. Ini membantu dalam memahami struktur data."""

wisata.isna().sum()

"""Menghitung dan menampilkan jumlah nilai yang hilang (NaN) di setiap kolom DataFrame wisata. Ini penting untuk mengidentifikasi kolom yang memerlukan penanganan nilai yang hilang."""

wisata.head()

"""Menampilkan lima baris pertama DataFrame wisata. Ini memberikan tampilan awal dari data."""

print('Banyak Data :', len(wisata.Place_Id.unique()))
print('Nama Kota :', wisata.City.unique())

"""Mencetak jumlah nilai unik dari Place_Id di DataFrame wisata (yang sudah dilakukan sebelumnya, tapi diulang di sini) dan menampilkan daftar nama kota unik yang ada di kolom City DataFrame wisata."""

wisata = wisata.drop('Unnamed: 11', axis=1)
wisata = wisata.drop('Unnamed: 12', axis=1)

"""Menghapus kolom 'Unnamed: 11' dan 'Unnamed: 12' dari DataFrame wisata. Argumen axis=1 menunjukkan bahwa yang dihapus adalah kolom."""

wisata.info()

"""Menampilkan kembali ringkasan DataFrame wisata setelah kolom yang tidak diperlukan dihapus untuk memverifikasi perubahan."""

wisata.head()

"""Menampilkan beberapa baris pertama DataFrame wisata setelah penghapusan kolom."""

feature = 'City'
count = wisata[feature].value_counts()
percent = 100*wisata[feature].value_counts(normalize=True)
city = pd.DataFrame({'jumlah destinasi Wisata /kota':count, 'persentase':percent.round(1)})
print(city)
count.plot(kind='bar', title=feature);

"""Menghitung jumlah destinasi wisata untuk setiap kota menggunakan value_counts(). Kemudian, menghitung persentase setiap kota dari total destinasi. Hasilnya ditampilkan dalam DataFrame bernama city dan divisualisasikan dalam bentuk bar chart."""

pengunjung.info()

"""Menampilkan ringkasan DataFrame pengunjung, termasuk tipe data setiap kolom dan jumlah nilai non-null."""

pengunjung.head()

"""Menampilkan beberapa baris pertama DataFrame pengunjung."""

print(pengunjung.shape)

"""Mencetak dimensi (jumlah baris dan kolom) dari DataFrame pengunjung.

Rating wisata
"""

rating_wisata.info()

"""Menampilkan ringkasan DataFrame rating_wisata, termasuk tipe data setiap kolom dan jumlah nilai non-null."""

rating_wisata.head()

"""Menampilkan beberapa baris pertama DataFrame rating_wisata."""

rating_wisata.describe()

"""Menampilkan statistik deskriptif untuk kolom numerik di DataFrame rating_wisata, seperti mean, standard deviation, min, max, dan kuartil."""

print('Jumlah Pengunjung :', len(rating_wisata.User_Id.unique()))
print('Jumlah Wisata :', len(rating_wisata.Place_Id.unique()))
print('Jumlah Rating :', len(rating_wisata))

"""Mencetak jumlah nilai unik dari User_Id dan Place_Id di DataFrame rating_wisata, serta jumlah total baris di DataFrame tersebut.

##Data Preprocessing
"""

wisata_bandung = wisata[wisata['City']=='Bandung']
wisata_bandung

"""Membuat DataFrame baru bernama wisata_bandung yang hanya berisi baris-baris dari DataFrame wisata di mana nilai kolom City adalah 'Bandung'."""

rating_wisata_bandung = pd.merge(rating_wisata, wisata_bandung[['Place_Id']], how='right', on='Place_Id')
rating_wisata_bandung

"""Menggabungkan DataFrame rating_wisata dengan DataFrame wisata_bandung menggunakan kunci Place_Id. Penggabungan dilakukan dengan tipe 'right' join, yang berarti semua baris dari wisata_bandung akan dipertahankan, dan data rating dari rating_wisata akan ditambahkan jika Place_Id cocok. Ini bertujuan untuk mendapatkan rating hanya untuk wisata yang ada di Bandung."""

user_bandung = pd.merge(pengunjung, rating_wisata_bandung[['User_Id']], how='right', on='User_Id').drop_duplicates().sort_values('User_Id')
user_bandung

"""Menggabungkan DataFrame pengunjung dengan kolom User_Id dari rating_wisata_bandung menggunakan 'right' join. Ini akan menghasilkan DataFrame yang berisi data pengunjung yang telah memberikan rating di Bandung. Kemudian, baris duplikat dihapus dan DataFrame diurutkan berdasarkan User_Id."""

all_wisata_bandung = rating_wisata_bandung
all_wisata_bandung

Membuat salinan dari DataFrame rating_wisata_bandung dan menyimpannya dalam variabel baru bernama all_wisata_bandung.

all_wisata_bandung = pd.merge(all_wisata_bandung,
                               wisata_bandung[['Place_Id','Place_Name','Category']],
                               on='Place_Id',
                               how='left')
all_wisata_bandung

Menggabungkan DataFrame all_wisata_bandung dengan kolom Place_Id, Place_Name, dan Category dari DataFrame wisata_bandung. Penggabungan ini dilakukan dengan 'left' join berdasarkan Place_Id untuk menambahkan nama dan kategori wisata ke data rating.

"""##Data Preparation"""

all_wisata_bandung.isnull().sum()

Menghitung dan menampilkan jumlah nilai yang hilang (NaN) di setiap kolom DataFrame all_wisata_bandung.

print('Banyak Data Wisata Bandung :', len(all_wisata_bandung.Place_Name.unique()))
print('Wisata Bandung :', all_wisata_bandung.Place_Name.unique())

"""Mencetak jumlah nilai unik dari Place_Name di DataFrame all_wisata_bandung dan menampilkan daftar nama wisata unik tersebut."""

preparation = all_wisata_bandung
preparation.sort_values('Place_Id')

"""Membuat salinan dari DataFrame all_wisata_bandung dan menyimpannya dalam variabel bernama preparation. Kemudian, mengurutkan DataFrame preparation berdasarkan kolom Place_Id."""

preparation = preparation.drop_duplicates('Place_Id')
preparation

"""Menghapus baris duplikat dari DataFrame preparation berdasarkan nilai unik di kolom Place_Id. Ini memastikan setiap destinasi wisata hanya muncul sekali."""

feature = 'Category'
count = preparation[feature].value_counts()
percent = 100*preparation[feature].value_counts(normalize=True)
kategori = pd.DataFrame({'jumlah Sebaran Category Wisata Bandung':count, 'persentase':percent.round(1)})
print(kategori)
count.plot(kind='bar', title=feature);

"""Menghitung jumlah destinasi wisata untuk setiap kategori menggunakan value_counts(). Kemudian, menghitung persentase setiap kategori dari total destinasi. Hasilnya ditampilkan dalam DataFrame bernama kategori dan divisualisasikan dalam bentuk bar chart."""

from os import pread
id_wisata = preparation['Place_Id'].tolist()
nama_wisata = preparation['Place_Name'].tolist()
kategori_wisata = preparation['Category'].tolist()

print(len(id_wisata))
print(len(nama_wisata))
print(preparation.Category.unique())

"""Mengambil daftar nilai dari kolom Place_Id, Place_Name, dan Category dari DataFrame preparation dan menyimpannya dalam list. Kemudian, mencetak panjang list id_wisata dan nama_wisata, serta menampilkan daftar kategori unik."""

new_wisata = pd.DataFrame({
    'id': id_wisata,
    'nama_wisata': nama_wisata,
    'kategori_wisata': kategori_wisata
})
new_wisata

"""Membuat DataFrame baru bernama new_wisata menggunakan list id_wisata, nama_wisata, dan kategori_wisata. DataFrame ini berisi informasi dasar tentang setiap destinasi wisata.

##Pemodelan Menggunakan Content-Based Filtering
"""

data = new_wisata
data.sample(5)

"""Menyalin DataFrame new_wisata ke dalam variabel data dan menampilkan 5 baris sampel acak dari DataFrame data."""

from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
tf = CountVectorizer()

tf.fit(data['kategori_wisata'])
tf.get_feature_names_out()

Mengimpor CountVectorizer dari sklearn.feature_extraction.text dan numpy. Menginisialisasi CountVectorizer bernama tf. Menerapkan fit() pada kolom kategori_wisata untuk mempelajari kosakata unik dari kategori. Kemudian, menampilkan nama fitur (kategori unik) yang dipelajari.

tfidf_matrix = tf.fit_transform(data['kategori_wisata'])
tfidf_matrix.shape

Menerapkan fit_transform() pada kolom kategori_wisata menggunakan CountVectorizer. Ini mengubah kategori teks menjadi matriks di mana setiap baris mewakili destinasi wisata dan setiap kolom mewakili kategori, dengan nilai yang menunjukkan berapa kali kategori tersebut muncul dalam destinasi. Menampilkan dimensi matriks yang dihasilkan.

np.set_printoptions(threshold=np.inf)
print(tfidf_matrix.todense())

"""Mengatur opsi cetak NumPy untuk menampilkan seluruh array tanpa pemotongan (threshold=np.inf). Kemudian, mengubah matriks hitungan kata (yang biasanya dalam format sparse) menjadi format dense dan mencetaknya. Ini berguna untuk melihat isi matriks, meskipun untuk matriks besar ini bisa menghabiskan banyak memori dan output."""

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.nama_wisata
).sample(10, axis=1, replace=True).sample(10, axis=0)

"""Membuat DataFrame pandas dari matriks hitungan kata (dalam format dense). Kolom diberi nama berdasarkan fitur (kategori) yang dipelajari oleh CountVectorizer, dan indeks diberi nama berdasarkan nama wisata. Kemudian, menampilkan sampel acak dari kolom dan baris DataFrame ini.

Menghitung Consine Similarity
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Mengimpor cosine_similarity dari sklearn.metrics.pairwise. Menghitung matriks Cosine Similarity antara semua destinasi wisata berdasarkan matriks hitungan kata (tfidf_matrix). Matriks ini menunjukkan seberapa mirip setiap pasangan destinasi berdasarkan kategori mereka."""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['nama_wisata'], columns=data['nama_wisata'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Membuat DataFrame pandas dari matriks Cosine Similarity. Indeks dan kolom DataFrame diberi nama berdasarkan nama wisata. Mencetak dimensi DataFrame dan menampilkan sampel acak dari kolom dan barisnya."""

def resto_recommendations(wisata_nama, similarity_data=cosine_sim_df, items=data[['nama_wisata', 'kategori_wisata']], k=5):
    index = similarity_data.loc[:,wisata_nama].to_numpy().argpartition(
        range(-1, -k, -1))
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(wisata_nama, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""Mendefinisikan fungsi resto_recommendations yang mengambil nama wisata, data kemiripan (matriks Cosine Similarity), dan data item (nama dan kategori wisata) sebagai input. Fungsi ini menemukan k destinasi wisata yang paling mirip dengan wisata_nama berdasarkan skor Cosine Similarity. Hasilnya dikembalikan dalam bentuk DataFrame."""

data[data.nama_wisata.eq('Masjid Daarut Tauhiid Bandung')]

resto_recommendations('Masjid Daarut Tauhiid Bandung')

Memanggil fungsi resto_recommendations dengan nama wisata 'Masjid Daarut Tauhiid Bandung' untuk mendapatkan rekomendasi destinasi wisata lain yang memiliki kategori serupa. Secara default, ini akan mengembalikan 5 rekomendasi.

"""##Pemodelan Colaborative Filtering"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

df = rating_wisata_bandung
df

"""Menyalin DataFrame rating_wisata_bandung ke dalam variabel df. DataFrame ini berisi data rating pengguna untuk wisata di Bandung."""

user_ids = df['User_Id'].unique().tolist()
print('list userID: ', user_ids)

user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
print('encoded userID : ', user_to_user_encoded)

user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}
print('encoded angka ke userID: ', user_encoded_to_user)

"""Mengambil daftar ID pengguna unik dari DataFrame df. Membuat dua kamus: user_to_user_encoded yang memetakan ID pengguna asli ke ID numerik yang dienkode (dimulai dari 0), dan user_encoded_to_user yang memetakan ID numerik yang dienkode kembali ke ID pengguna asli. Mencetak kamus-kamus ini."""

wisata_id = df['Place_Id'].unique().tolist()

wisata_to_wisata_encoded = {x: i for i, x in enumerate(wisata_id)}

wisata_encoded_to_wisata = {i: x for i, x in enumerate(wisata_id)}

"""Mengambil daftar ID wisata unik dari DataFrame df. Membuat dua kamus: wisata_to_wisata_encoded yang memetakan ID wisata asli ke ID numerik yang dienkode, dan wisata_encoded_to_wisata yang memetakan ID numerik yang dienkode kembali ke ID wisata asli."""

df['user'] = df['User_Id'].map(user_to_user_encoded)

df['wisata'] = df['Place_Id'].map(wisata_to_wisata_encoded)

"""Menambahkan dua kolom baru ke DataFrame df: user yang berisi ID pengguna yang dienkode, dan wisata yang berisi ID wisata yang dienkode. Ini dilakukan dengan menggunakan kamus pemetaan yang dibuat sebelumnya."""

num_users = len(user_to_user_encoded)
print(num_users)

num_wisata = len(wisata_to_wisata_encoded)
print(num_wisata)

df['Place_Ratings'] = df['Place_Ratings'].values.astype(np.float32)

min_rating = min(df['Place_Ratings'])

max_rating = max(df['Place_Ratings'])

print('Number of User: {}, Number of Resto: {}, Min Rating: {}, Max Rating: {}'.format(
    num_users, num_wisata, min_rating, max_rating
))

"""Mendapatkan jumlah total pengguna dan wisata unik yang dienkode. Mengubah tipe data kolom Place_Ratings menjadi float32. Menemukan nilai rating minimum dan maksimum. Mencetak jumlah pengguna, wisata, serta rating minimum dan maksimum."""

df = df.sample(frac=1, random_state=42)
df

"""Mengacak baris-baris dalam DataFrame df menggunakan sample(frac=1). random_state=42 memastikan pengacakan yang dapat direproduksi. Hasil DataFrame yang diacak kemudian ditampilkan."""

x = df[['user', 'wisata']].values

y = df['Place_Ratings'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values

train_indices = int(0.8 * df.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)

print(x, y)

"""Membuat array NumPy x yang berisi kolom user dan wisata (ID yang dienkode). Membuat array NumPy y yang berisi rating yang dinormalisasi ke rentang [0, 1]. Membagi data menjadi set pelatihan dan validasi dengan rasio 80:20. Menampilkan array x dan y."""

class RecommenderNet(tf.keras.Model):

  def __init__(self, num_users, num_wisata, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_wisata = num_wisata
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding( # layer embedding user
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias
    self.wisata_embedding = layers.Embedding( # layer embeddings resto
        num_wisata,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.wisata_bias = layers.Embedding(num_wisata, 1) # layer embedding resto bias

  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1
    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2
    wisata_vector = self.wisata_embedding(inputs[:, 1]) # memanggil layer embedding 3
    wisata_bias = self.wisata_bias(inputs[:, 1]) # memanggil layer embedding 4

    dot_user_wisata = tf.tensordot(user_vector, wisata_vector, 2)

    x = dot_user_wisata + user_bias + wisata_bias

    return tf.nn.sigmoid(x) # activation sigmoid

"""Mendefinisikan kelas model kustom RecommenderNet yang mewarisi dari tf.keras.Model. Model ini menggunakan lapisan embedding untuk pengguna dan wisata, serta bias untuk pengguna dan wisata. Metode call mendefinisikan cara model memproses input untuk menghasilkan prediksi rating. Ini adalah arsitektur dasar untuk model Collaborative Filtering berbasis neural network."""

model = RecommenderNet(num_users, num_wisata, 50) # inisialisasi model

# model compile
model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

"""Menginisialisasi objek model RecommenderNet dengan jumlah pengguna, jumlah wisata, dan ukuran embedding 50. Mengkompilasi model dengan menentukan fungsi loss (BinaryCrossentropy karena output dinormalisasi ke [0, 1]), optimizer (Adam dengan learning rate 0.001), dan metrik evaluasi (RootMeanSquaredError)."""

history = model.fit(
    x = x_train,
    y = y_train,
    batch_size = 8,
    epochs = 100,
    validation_data = (x_val, y_val)
)

"""Melatih model menggunakan data pelatihan (x_train dan y_train). Proses pelatihan dilakukan selama 100 epoch dengan ukuran batch 8. Model juga dievaluasi pada set validasi (x_val dan y_val) setelah setiap epoch. Hasil pelatihan (loss dan metrik) disimpan dalam variabel history."""

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Membuat plot menggunakan Matplotlib untuk memvisualisasikan metrik Root Mean Squared Error (RMSE) selama pelatihan. Grafik menampilkan RMSE pada set pelatihan ('train') dan set validasi ('test') terhadap jumlah epoch. Ini membantu dalam menilai kinerja model dan mendeteksi overfitting."""

wisata_df = new_wisata
df = rating_wisata_bandung

user_id = df.User_Id.sample(1).iloc[0]
wisata_visited_by_user = df[df.User_Id == user_id]

# Operator bitwise (~), bisa diketahui di sini https://docs.python.org/3/reference/expressions.html
wisata_not_visited = wisata_df[~wisata_df['id'].isin(wisata_visited_by_user.Place_Id.values)]['id']
wisata_not_visited = list(
    set(wisata_not_visited)
    .intersection(set(wisata_to_wisata_encoded.keys()))
)

wisata_not_visited = [[wisata_to_wisata_encoded.get(x)] for x in wisata_not_visited]
user_encoder = user_to_user_encoded.get(user_id)
user_wisata_array = np.hstack(
    ([[user_encoder]] * len(wisata_not_visited), wisata_not_visited)
)

"""Menyiapkan data untuk mendapatkan rekomendasi untuk pengguna acak. Mengambil sampel ID pengguna secara acak. Mengidentifikasi wisata yang telah dikunjungi oleh pengguna tersebut. Kemudian, mengidentifikasi wisata yang belum dikunjungi pengguna dan yang memiliki ID yang dienkode. Data ini diubah menjadi format yang siap untuk dimasukkan ke dalam model untuk prediksi."""

ratings = model.predict(user_wisata_array).flatten()

top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_wisata_ids = [
    wisata_encoded_to_wisata.get(wisata_not_visited[x][0]) for x in top_ratings_indices
]

print('Menampilkan Rekomendasi wisata untuk wisatawan atau pengunjung: {}'.format(user_id))
print('===' * 9)
print('Wisata dengan rating tertinggi dari wisatawan atau pengunjung')
print('----' * 8)

top_wisata_user = (
    wisata_visited_by_user.sort_values(
        by = 'Place_Ratings',
        ascending=False
    )
    .head(5)
    .Place_Id.values
)

wisata_df_rows = wisata_df[wisata_df['id'].isin(top_wisata_user)]
for row in wisata_df_rows.itertuples():
    print(row.nama_wisata, ':', row.kategori_wisata)

print('----' * 8)
print('10 rekomendasi destinasi wisata Bandung')
print('----' * 8)

recommended_wisata = wisata_df[wisata_df['id'].isin(recommended_wisata_ids)]
for row in recommended_wisata.itertuples():
    print(row.nama_wisata, ':', row.kategori_wisata)